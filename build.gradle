plugins {
    id 'java'
    id 'application'
//    id 'java-library'
}

apply from: 'gradle/eclipse.gradle'

java {
    //modularity.inferModulePath = false
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options {
        memberLevel = JavadocMemberLevel.PRIVATE
    }
}

application {
    mainModule = 'com.github.ennoxhd.empty.java'
    mainClass  = 'com.github.ennoxhd.empty.java.app.EmptyJavaProject'
}

run {
//    standardInput = System.in
}

repositories {
    mavenCentral()
}

dependencies {
//    implementation 'com.google.code.gson:gson:2.13.1'
//
//    JavaFX
//    ------
//    def group = 'org.openjfx'
//    def version = '24.0.1'
//    def fxModules = ['javafx-base','javafx-controls','javafx-fxml','javafx-graphics','javafx-media','javafx-web','javafx-swing']
//    
//    def osName = System.getProperty('os.name').toLowerCase()
//    def platform = 'mac'
//    if (osName.contains('windows')) {
//        platform = 'win'
//    }
//    if (osName.contains('linux')) {
//        platform = 'linux'
//    }
//    fxModules.each {
//        implementation("$group:$it:$version:$platform")
//    }
}

task debug (type: Exec) {
    group = 'application'
    description = 'Runs this project as a JVM application with debugging enabled (add program arguments with -Pargs="...")'

    def baseCommand = ['run', '--debug-jvm']
    if(project.hasProperty('args')) {
        baseCommand += [' --args="' + project.getProperty('args') + '"']
    }
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine = ['cmd', '/c', 'gradlew.bat'] + baseCommand
    } else {
        commandLine = ['sh', 'gradlew'] + baseCommand
    }
}

task showJavadoc(dependsOn: javadoc) {
    group = 'documentation'
    description = 'Shows the generated Javadoc API documentation in the default browser.'
    
    doLast {
        java.awt.Desktop.getDesktop().browse(project.file("./build/docs/javadoc/index.html").toURI())
    }
}
